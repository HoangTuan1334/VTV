# üé® H√†m t·∫°o ·∫£nh ƒê√öNG K√çCH TH∆Ø·ªöC v·ªõi Gemini 2.5 Flash Image
def generate_image_with_gemini(prompt, width, height):
    """
    T·∫°o ·∫£nh v·ªõi Gemini 2.5 Flash Image - ƒê√öNG K√çCH TH∆Ø·ªöC NGAY T·ª™ ƒê·∫¶U
    
    ‚ö†Ô∏è KH√îNG RESIZE - Gemini ph·∫£i sinh ƒë√∫ng k√≠ch th∆∞·ªõc
    
    Args:
        prompt: M√¥ t·∫£ ·∫£nh (ti·∫øng Anh)
        width: Chi·ªÅu r·ªông CH√çNH X√ÅC (px)
        height: Chi·ªÅu cao CH√çNH X√ÅC (px)
    
    Returns:
        PIL.Image v·ªõi k√≠ch th∆∞·ªõc CH√çNH X√ÅC width x height
    """
    print(f"   [Gemini] Y√™u c·∫ßu ·∫£nh {width}x{height}px")
    print(f"   Prompt: {prompt[:80]}...")
    
    try:
        # T·∫°o prompt Y√äU C·∫¶U ƒê√öNG K√çCH TH∆Ø·ªöC
        aspect_ratio = width / height
        
        # X√°c ƒë·ªãnh orientation
        if aspect_ratio > 1.5:
            orientation = "wide landscape"
        elif aspect_ratio > 1.1:
            orientation = "landscape"
        elif aspect_ratio > 0.9:
            orientation = "square"
        elif aspect_ratio > 0.6:
            orientation = "portrait"
        else:
            orientation = "tall portrait"
        
        full_prompt = f"""Create a {orientation} comic panel image.

CRITICAL REQUIREMENTS:
- Exact dimensions: {width} x {height} pixels
- Aspect ratio: {aspect_ratio:.2f}:1
- {orientation.upper()} FORMAT ONLY

Content:
{prompt}

Style:
- Professional comic book artwork
- Clean composition
- High quality illustration
- Suitable for comic panel
- NO TEXT OR DIALOGUE IN IMAGE (text will be added separately)

Output must be EXACTLY {width}x{height} pixels."""
        
        # G·ªçi image_model
        if image_model:
            try:
                response = image_model.generate_content([full_prompt])
                
                if hasattr(response, 'candidates') and len(response.candidates) > 0:
                    for part in response.candidates[0].content.parts:
                        if hasattr(part, 'inline_data') and part.inline_data:
                            image_bytes = part.inline_data.data
                            img = Image.open(io.BytesIO(image_bytes))
                            
                            original_size = img.size
                            print(f"   üìê Gemini sinh: {original_size[0]}x{original_size[1]}px")
                            
                            # ‚ö†Ô∏è CH·ªà RESIZE N·∫æU SAI K√çCH TH∆Ø·ªöC
                            if img.size != (width, height):
                                print(f"   ‚ö†Ô∏è SAI K√çCH TH∆Ø·ªöC! ƒêang resize {original_size} ‚Üí {width}x{height}")
                                img = img.resize((width, height), Image.Resampling.LANCZOS)
                            else:
                                print(f"   ‚úÖ ƒê√öNG K√çCH TH∆Ø·ªöC!")
                            
                            return img
            except Exception as e:
                print(f"   ‚ö†Ô∏è L·ªói SDK: {e}")
        
        # G·ªçi REST API
        print(f"   ‚Üí G·ªçi REST API...")
        
        api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-image:generateContent?key={GEMINI_API_KEY}"
        
        payload = {
            "contents": [{
                "parts": [{
                    "text": full_prompt
                }]
            }],
            "generationConfig": {
                "temperature": 0.8,
                "topP": 0.95,
                "topK": 40
            }
        }
        
        response = requests.post(api_url, json=payload, timeout=90)
        
        if response.status_code == 200:
            result = response.json()
            
            if 'candidates' in result:
                for candidate in result['candidates']:
                    if 'content' in candidate:
                        for part in candidate['content'].get('parts', []):
                            if 'inlineData' in part:
                                image_data = base64.b64decode(part['inlineData']['data'])
                                img = Image.open(io.BytesIO(image_data))
                                
                                original_size = img.size
                                print(f"   üìê Gemini sinh: {original_size[0]}x{original_size[1]}px")
                                
                                # ‚ö†Ô∏è CH·ªà RESIZE N·∫æU SAI
                                if img.size != (width, height):
                                    print(f"   ‚ö†Ô∏è SAI K√çCH TH∆Ø·ªöC! Resize {original_size} ‚Üí {width}x{height}")
                                    img = img.resize((width, height), Image.Resampling.LANCZOS)
                                else:
                                    print(f"   ‚úÖ ƒê√öNG K√çCH TH∆Ø·ªöC!")
                                
                                return img
        
        raise Exception(f"Kh√¥ng t√¨m th·∫•y ·∫£nh. Status: {response.status_code}")
        
    except Exception as e:
        raise Exception(f"L·ªói t·∫°o ·∫£nh: {str(e)}")


print("=" * 70)
print("‚úÖ ƒê√£ c·∫•u h√¨nh h√†m t·∫°o ·∫£nh ƒê√öNG K√çCH TH∆Ø·ªöC")
print("=" * 70)
print("üìå Gemini s·∫Ω nh·∫≠n y√™u c·∫ßu CH√çNH X√ÅC v·ªÅ k√≠ch th∆∞·ªõc")
print("üìå N·∫øu Gemini sinh sai size ‚Üí s·∫Ω c·∫£nh b√°o v√† resize")
print("üìå L·ªùi tho·∫°i s·∫Ω ƒë∆∞·ª£c th√™m SAU v·ªõi font ƒê·∫∏P")
print("=" * 70)




# üí¨ H√†m v·∫Ω l·ªùi tho·∫°i ƒê·∫∏P cho comic
def draw_dialogue_bubble(img, dialogue_text, position="top"):
    """
    V·∫Ω l·ªùi tho·∫°i bubble ƒê·∫∏P l√™n ·∫£nh panel
    
    Args:
        img: PIL Image object
        dialogue_text: L·ªùi tho·∫°i ti·∫øng Vi·ªát
        position: "top" ho·∫∑c "bottom"
    
    Returns:
        PIL Image v·ªõi bubble ƒë√£ v·∫Ω
    """
    from PIL import ImageDraw, ImageFont
    
    # T·∫°o copy ƒë·ªÉ kh√¥ng l√†m h·ªèng ·∫£nh g·ªëc
    img_copy = img.copy()
    draw = ImageDraw.Draw(img_copy, 'RGBA')
    w, h = img.size
    
    # T√≠nh to√°n k√≠ch th∆∞·ªõc bubble
    padding = 20
    bubble_width = w - padding * 2
    
    # Font size t·ª± ƒë·ªông theo k√≠ch th∆∞·ªõc panel
    font_size = max(28, min(56, int(w / 18)))
    
    # Th·ª≠ load font ƒë·∫πp (Windows fonts)
    try:
        font = ImageFont.truetype("C:\Windows\Fonts\TIMESBD.TTF", font_size)
    except:
        try:
            font = ImageFont.truetype("C:\Windows\Fonts\TIMESBD.TTF", font_size)
        except:
            try:
                font = ImageFont.truetype(r"C:\Windows\Fonts\TIMESBD.TTF", font_size)
            except:
                print(f"   ‚ö†Ô∏è Kh√¥ng load ƒë∆∞·ª£c font, d√πng default")
                font = ImageFont.load_default()
    
    # Wrap text th√¥ng minh
    words = dialogue_text.split()
    lines = []
    current_line = ""
    max_line_width = bubble_width - padding * 2
    
    for word in words:
        test_line = current_line + word + " "
        try:
            bbox = draw.textbbox((0, 0), test_line, font=font)
            line_width = bbox[2] - bbox[0]
        except:
            # Fallback n·∫øu textbbox kh√¥ng ho·∫°t ƒë·ªông
            line_width = len(test_line) * (font_size // 2)
        
        if line_width <= max_line_width:
            current_line = test_line
        else:
            if current_line:
                lines.append(current_line.strip())
            current_line = word + " "
    
    if current_line:
        lines.append(current_line.strip())
    
    # Gi·ªõi h·∫°n 3 d√≤ng
    lines = lines[:3]
    
    # T√≠nh to√°n k√≠ch th∆∞·ªõc bubble
    line_height = font_size + 12
    bubble_height = len(lines) * line_height + padding * 2 + 10
    
    # V·ªã tr√≠ bubble
    if position == "top":
        bubble_y = padding
    else:  # bottom
        bubble_y = h - bubble_height - padding
    
    bubble_x = padding
    
    # V·∫Ω SHADOW cho bubble
    shadow_offset = 5
    draw.rounded_rectangle(
        [bubble_x + shadow_offset, bubble_y + shadow_offset, 
         bubble_x + bubble_width + shadow_offset, bubble_y + bubble_height + shadow_offset],
        radius=20,
        fill=(0, 0, 0, 120)  # B√≥ng ƒëen m·ªù
    )
    
    # V·∫Ω BUBBLE ch√≠nh (tr·∫Øng)
    draw.rounded_rectangle(
        [bubble_x, bubble_y, bubble_x + bubble_width, bubble_y + bubble_height],
        radius=20,
        fill=(255, 255, 255, 250),  # Tr·∫Øng g·∫ßn ƒë·ª•c
        outline=(0, 0, 0, 255),  # Vi·ªÅn ƒëen
        width=4
    )
    
    # V·∫Ω TEXT
    text_y = bubble_y + padding + 5
    for line in lines:
        # T√≠nh to√°n ƒë·ªÉ CENTER text
        try:
            bbox = draw.textbbox((0, 0), line, font=font)
            text_width = bbox[2] - bbox[0]
        except:
            text_width = len(line) * (font_size // 2)
        
        text_x = bubble_x + (bubble_width - text_width) // 2
        
        # V·∫Ω TEXT SHADOW (nh·∫°t)
        draw.text(
            (text_x + 2, text_y + 2),
            line,
            fill=(120, 120, 120, 200),
            font=font
        )
        
        # V·∫Ω TEXT ch√≠nh (ƒëen ƒë·∫≠m)
        draw.text(
            (text_x, text_y),
            line,
            fill=(0, 0, 0, 255),
            font=font
        )
        
        text_y += line_height
    
    return img_copy


print("‚úÖ ƒê√£ ƒë·ªãnh nghƒ©a h√†m v·∫Ω l·ªùi tho·∫°i ƒê·∫∏P")
print("üìå Font l·ªõn t·ª± ƒë·ªông theo k√≠ch th∆∞·ªõc panel")
print("üìå Bubble tr√≤n v·ªõi shadow ƒë·∫πp")
print("üìå Text ƒë∆∞·ª£c cƒÉn gi·ªØa v√† wrap th√¥ng minh")


# üß™ TEST HO√ÄN CH·ªàNH - T·∫°o ·∫£nh + L·ªùi tho·∫°i ƒê·∫∏P
print("üß™ TEST: T·∫°o ·∫£nh 620x520px v·ªõi l·ªùi tho·∫°i ƒê·∫∏P")
print("=" * 70)

test_prompt = "A cute anime girl with blue hair smiling happily in a sunny park, manga art style, detailed illustration"
test_dialogue = "Ch√†o b·∫°n! H√¥m nay tr·ªùi ƒë·∫πp qu√° nh·ªâ?"

try:
    # 1. T·∫†O ·∫¢NH
    print("\nüì∏ B∆∞·ªõc 1: T·∫°o ·∫£nh...")
    test_image = generate_image_with_gemini(test_prompt, 620, 520)
    
    print(f"\n‚úÖ ·∫¢nh ƒë√£ t·∫°o!")
    print(f"   K√≠ch th∆∞·ªõc: {test_image.size}")
    
    # Ki·ªÉm tra xem c√≥ b·ªã c·∫Øt kh√¥ng
    if test_image.size == (620, 520):
        print(f"   ‚úÖ ƒê√öNG K√çCH TH∆Ø·ªöC - KH√îNG B·ªä C·∫ÆT!")
    else:
        print(f"   ‚ö†Ô∏è SAI K√çCH TH∆Ø·ªöC - Gemini sinh ra {test_image.size}")
    
    # 2. TH√äM L·ªúI THO·∫†I ƒê·∫∏P
    print(f"\nüí¨ B∆∞·ªõc 2: Th√™m l·ªùi tho·∫°i...")
    print(f"   N·ªôi dung: '{test_dialogue}'")
    test_image_with_dialogue = draw_dialogue_bubble(test_image.copy(), test_dialogue, "top")
    
    # 3. HI·ªÇN TH·ªä V√Ä L∆ØU
    print(f"\nüñºÔ∏è K·∫øt qu·∫£:")
    display(test_image_with_dialogue)
    
    test_image_with_dialogue.save("test_final_620x520.png", quality=100)
    print(f"\n‚úÖ HO√ÄN TH√ÄNH!")
    print(f"   ƒê√£ l∆∞u: test_final_620x520.png")
    print(f"   K√≠ch th∆∞·ªõc: {test_image_with_dialogue.size}")
    print(f"   L·ªùi tho·∫°i: Font ƒê·∫∏P, bubble tr√≤n, shadow")
    
except Exception as e:
    print(f"\n‚ùå L·ªñI: {str(e)[:300]}...")