# üéØ T·∫°o ·∫£nh cho t·ª´ng panel v·ªõi DETAILED PROMPT
def create_panel_images_v2(story_script, selected_layouts):
    """
    T·∫°o ·∫£nh cho t·ª´ng panel - S·ª¨ D·ª§NG DETAILED PROMPT ƒê√É SINH
    
    ‚≠ê LOGIC M·ªöI:
    - Kh√¥ng c·∫ßn demo page
    - M·ªói panel d√πng detailed_prompt ƒë√£ ƒë∆∞·ª£c Gemini t·∫°o
    - Detailed prompt ƒë√£ bao g·ªìm character consistency
    """
    panel_images = {}
    os.makedirs("panel_images", exist_ok=True)
    
    for i, page_data in enumerate(story_script['pages']):
        page_num = page_data['page_num']
        layout_info = selected_layouts[i]
        
        # ‚ö†Ô∏è KI·ªÇM TRA: S·ªë panel trong script vs layout
        num_panels_in_layout = len(layout_info['panels'])
        num_panels_in_script = len(page_data['panels'])
        
        if num_panels_in_script > num_panels_in_layout:
            print(f"\n‚ö†Ô∏è C·∫¢NH B√ÅO: Trang {page_num} c√≥ {num_panels_in_script} panels trong script")
            print(f"   nh∆∞ng layout ch·ªâ c√≥ {num_panels_in_layout} khung!")
            print(f"   ‚Üí Ch·ªâ t·∫°o {num_panels_in_layout} panels ƒë·∫ßu ti√™n")
            # C·∫Øt b·ªõt panels trong script ƒë·ªÉ kh·ªõp v·ªõi layout
            page_data['panels'] = page_data['panels'][:num_panels_in_layout]
        
        print(f"\nüìÑ Trang {page_num}: T·∫°o {len(page_data['panels'])} panels...")
        
        page_panels = []
        
        for j, panel_data in enumerate(page_data['panels']):
            panel_num = panel_data['panel_num']
            
            # L·∫•y k√≠ch th∆∞·ªõc CH√çNH X√ÅC t·ª´ layout
            x, y, w, h = layout_info['panels'][j]
            aspect_ratio = w / h 
            print(f"\n   üé® Panel {panel_num}:")
            print(f"      K√≠ch th∆∞·ªõc: {w}x{h}px ({aspect_ratio})")
            
            # ‚≠ê S·ª¨ D·ª§NG DETAILED PROMPT ƒê√É SINH
            if 'detailed_prompt' in panel_data:
                panel_prompt = panel_data['detailed_prompt']
                print(f"      ‚úÖ S·ª≠ d·ª•ng detailed prompt ({len(panel_prompt)} chars)")
            else:
                # Fallback n·∫øu kh√¥ng c√≥ detailed_prompt
                print(f"      ‚ö†Ô∏è Kh√¥ng c√≥ detailed_prompt, d√πng basic visual")
                panel_prompt = f"{story_script['art_style']} comic art. {panel_data.get('basic_visual', '')}. {panel_data.get('shot_type', 'medium')} shot. NO TEXT in image."
            
            # T·∫†O ·∫¢NH v·ªõi k√≠ch th∆∞·ªõc CH√çNH X√ÅC
            try:
                panel_img = generate_image_with_gemini(panel_prompt, w, h)
                
                # Ki·ªÉm tra k√≠ch th∆∞·ªõc
                actual_size = panel_img.size
                if actual_size != (w, h):
                    print(f"      ‚ö†Ô∏è C·∫¢NH B√ÅO: ·∫¢nh sinh ra {actual_size} kh√°c y√™u c·∫ßu {w}x{h}")
                else:
                    print(f"      ‚úÖ K√≠ch th∆∞·ªõc CH√çNH X√ÅC!")
                
                # TH√äM L·ªúI THO·∫†I ƒê·∫∏P (n·∫øu c√≥)
                if panel_data.get('dialogue'):
                    dialogue_text = panel_data['dialogue']
                    print(f"      üí¨ Th√™m l·ªùi tho·∫°i: {dialogue_text[:40]}...")
                    
                    # V·∫Ω bubble l·ªùi tho·∫°i ƒê·∫∏P
                    panel_img = draw_dialogue_bubble(panel_img, dialogue_text, position="top")
                
                # L∆ØU ·∫¢NH
                panel_path = f"panel_images/page_{page_num:02d}_panel_{panel_num:02d}.png"
                panel_img.save(panel_path, quality=100)  # Quality 100 - KH√îNG N√âN
                
                page_panels.append({
                    "panel_num": panel_num,
                    "image": panel_img,
                    "path": panel_path,
                    "position": (x, y, w, h)
                })
                
                print(f"      ‚úÖ ƒê√£ l∆∞u: {panel_path}")
                
            except Exception as e:
                print(f"      ‚ùå L·ªñI t·∫°o ·∫£nh: {str(e)[:200]}")
                # T·∫°o ·∫£nh placeholder
                panel_img = Image.new("RGB", (w, h), "lightgray")
                draw = ImageDraw.Draw(panel_img)
                draw.text((w//2, h//2), f"Error\nPanel {panel_num}", fill="red", anchor="mm")
                
                panel_path = f"panel_images/page_{page_num:02d}_panel_{panel_num:02d}_ERROR.png"
                panel_img.save(panel_path)
                
                page_panels.append({
                    "panel_num": panel_num,
                    "image": panel_img,
                    "path": panel_path,
                    "position": (x, y, w, h)
                })
        
        panel_images[page_num] = page_panels
        print(f"\n   ‚úÖ Ho√†n th√†nh trang {page_num}")
    
    return panel_images


print("‚úÖ ƒê√£ ƒë·ªãnh nghƒ©a create_panel_images_v2")
print("üìå S·ª≠ d·ª•ng detailed_prompt cho m·ªói panel")
print("üìå Kh√¥ng c·∫ßn demo page n·ªØa")



# üéØ H√†m v·∫Ω l·ªùi tho·∫°i ƒê·∫∏P cho comic
def draw_dialogue_bubble(img, dialogue_text, position="top"):
    """
    V·∫Ω l·ªùi tho·∫°i bubble ƒê·∫∏P l√™n ·∫£nh panel
    
    Args:
        img: PIL Image object
        dialogue_text: L·ªùi tho·∫°i ti·∫øng Vi·ªát
        position: "top" ho·∫∑c "bottom"
    """
    from PIL import ImageDraw, ImageFont
    
    draw = ImageDraw.Draw(img, 'RGBA')
    w, h = img.size
    
    # T√≠nh to√°n k√≠ch th∆∞·ªõc bubble
    padding = 20
    bubble_width = w - padding * 2
    
    # Font size t·ª± ƒë·ªông theo k√≠ch th∆∞·ªõc panel
    font_size = max(24, min(48, int(w / 20)))
    
    # Th·ª≠ load font ƒë·∫πp, fallback v·ªÅ default
    try:
        # Windows fonts
        font = ImageFont.truetype(r"C:\Windows\Fonts\TIMESBD.TTF", font_size)
        font_bold = ImageFont.truetype(r"C:\Windows\Fonts\TIMESBD.TTF", font_size + 4)
    except:
        try:
            font = ImageFont.truetype(r"C:\Windows\Fonts\TIMESBD.TTF", font_size)
            font_bold = font
        except:
            font = ImageFont.load_default()
            font_bold = font
    
    # Wrap text th√¥ng minh
    words = dialogue_text.split()
    lines = []
    current_line = ""
    max_line_width = bubble_width - padding * 2
    
    for word in words:
        test_line = current_line + word + " "
        bbox = draw.textbbox((0, 0), test_line, font=font)
        line_width = bbox[2] - bbox[0]
        
        if line_width <= max_line_width:
            current_line = test_line
        else:
            if current_line:
                lines.append(current_line.strip())
            current_line = word + " "
    
    if current_line:
        lines.append(current_line.strip())
    
    # Gi·ªõi h·∫°n 3 d√≤ng
    lines = lines[:3]
    
    # T√≠nh to√°n k√≠ch th∆∞·ªõc bubble
    line_height = font_size + 8
    bubble_height = len(lines) * line_height + padding * 2
    
    # V·ªã tr√≠ bubble
    if position == "top":
        bubble_y = padding
    else:  # bottom
        bubble_y = h - bubble_height - padding
    
    bubble_x = padding
    
    # V·∫Ω SHADOW cho bubble
    shadow_offset = 4
    draw.rounded_rectangle(
        [bubble_x + shadow_offset, bubble_y + shadow_offset, 
         bubble_x + bubble_width + shadow_offset, bubble_y + bubble_height + shadow_offset],
        radius=15,
        fill=(0, 0, 0, 100)  # B√≥ng ƒëen m·ªù
    )
    
    # V·∫Ω BUBBLE ch√≠nh (tr·∫Øng v·ªõi opacity)
    draw.rounded_rectangle(
        [bubble_x, bubble_y, bubble_x + bubble_width, bubble_y + bubble_height],
        radius=15,
        fill=(255, 255, 255, 240),  # Tr·∫Øng g·∫ßn nh∆∞ ƒë·ª•c
        outline=(0, 0, 0, 255),  # Vi·ªÅn ƒëen
        width=3
    )
    
    # V·∫Ω TEXT
    text_y = bubble_y + padding
    for line in lines:
        # T√≠nh to√°n ƒë·ªÉ CENTER text
        bbox = draw.textbbox((0, 0), line, font=font)
        text_width = bbox[2] - bbox[0]
        text_x = bubble_x + (bubble_width - text_width) // 2
        
        # V·∫Ω TEXT SHADOW
        draw.text(
            (text_x + 2, text_y + 2),
            line,
            fill=(150, 150, 150, 180),
            font=font
        )
        
        # V·∫Ω TEXT ch√≠nh
        draw.text(
            (text_x, text_y),
            line,
            fill=(0, 0, 0, 255),
            font=font
        )
        
        text_y += line_height
    
    return img


# üéØ T·∫°o t·∫•t c·∫£ ·∫£nh panels v·ªõi DETAILED PROMPTS
# if story_script:
#     print("\n" + "=" * 70)
#     print("üéØ B·∫ÆT ƒê·∫¶U T·∫†O ·∫¢NH CHO T·ª™NG PANEL")
#     print("=" * 70)
#     print("üìå S·ª≠ d·ª•ng DETAILED PROMPTS ƒë√£ sinh")
#     print("üìå M·ªói ·∫£nh: K√çCH TH∆Ø·ªöC CH√çNH X√ÅC theo Gemini aspect ratios")
#     print("üìå Nh√¢n v·∫≠t nh·∫•t qu√°n qua detailed character descriptions")
#     print("üìå L·ªùi tho·∫°i: Font ƒê·∫∏P, bubble tr√≤n, shadow")
#     print("=" * 70)
    
#     # ‚≠ê S·ª¨ D·ª§NG H√ÄM M·ªöI create_panel_images_v2
#     panel_images = create_panel_images_v2(story_script, selected_layouts)
    
#     total_panels = sum([len(p) for p in panel_images.values()])
#     print(f"\n‚úÖ ƒê√É T·∫†O XONG {total_panels} PANELS!")
#     print(f"   üìñ T·∫•t c·∫£ trang: Nh√¢n v·∫≠t nh·∫•t qu√°n nh·ªù detailed prompts")
# else:
#     print("‚ùå Thi·∫øu d·ªØ li·ªáu. Vui l√≤ng ch·∫°y l·∫°i c√°c b∆∞·ªõc tr∆∞·ªõc.")



# üéØ T·∫°o t·∫•t c·∫£ ·∫£nh panels v·ªõi DETAILED PROMPTS
if story_script:
    print("\n" + "=" * 70)
    print("üéØ B·∫ÆT ƒê·∫¶U T·∫†O ·∫¢NH CHO T·ª™NG PANEL")
    print("=" * 70)
    print("üìå S·ª≠ d·ª•ng detailed prompts ƒë√£ sinh")
    print("üìå M·ªói ·∫£nh: K√çCH TH∆Ø·ªöC CH√çNH X√ÅC theo Gemini aspect ratios")
    print("üìå Nh√¢n v·∫≠t nh·∫•t qu√°n qua detailed character descriptions")
    print("üìå L·ªùi tho·∫°i: Font ƒê·∫∏P, bubble tr√≤n, shadow")
    print("=" * 70)
    
    panel_images = create_panel_images_v2(story_script, selected_layouts)
    
    total_panels = sum([len(p) for p in panel_images.values()])
    print(f"\n‚úÖ ƒê√É T·∫†O XONG {total_panels} PANELS!")
    print(f"   üìñ T·∫•t c·∫£ trang: Nh√¢n v·∫≠t nh·∫•t qu√°n nh·ªù detailed prompts")
else:
    print("‚ùå Thi·∫øu d·ªØ li·ªáu. Vui l√≤ng ch·∫°y l·∫°i c√°c b∆∞·ªõc tr∆∞·ªõc.")



