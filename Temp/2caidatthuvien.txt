# # üì¶ C√†i ƒë·∫∑t th∆∞ vi·ªán c·∫ßn thi·∫øt
# !pip install --quiet pillow google-generativeai requests vertexai

# üìö Import th∆∞ vi·ªán
import json
import os
import random
import base64
import time
from PIL import Image, ImageDraw, ImageFont
from pathlib import Path
import google.generativeai as genai
import requests
from io import BytesIO



import requests
import json
import base64
from openai import OpenAI

# ‚öôÔ∏è C·∫•u h√¨nh API Keys
GEMINI_API_KEY = "AIzaSyCwhqIs7GrVi1G6wgtejD_w_niFFQws6mo"

# C·∫•u h√¨nh API gi√°n ti·∫øp
AI_API_BASE = "https://api.thucchien.ai/v1"

# Kh·ªüi t·∫°o client cho text generation (s·ª≠ d·ª•ng OpenAI-compatible)
client = OpenAI(
    api_key=GEMINI_API_KEY,
    base_url=AI_API_BASE
)

# Model cho sinh k·ªãch b·∫£n (text) - Kh√¥ng c·∫ßn kh·ªüi t·∫°o ri√™ng, s·ª≠ d·ª•ng qua client
text_model = "gemini-2.0-flash-exp"  # Ch·ªâ ƒë·ªãnh model khi g·ªçi

# Model cho sinh ·∫£nh - S·ª≠ d·ª•ng qua requests
image_model = "gemini-2.5-flash-image"  # Ch·ªâ ƒë·ªãnh model khi g·ªçi, nh∆∞ng s·∫Ω ki·ªÉm tra

print("‚úÖ ƒê√£ c·∫•u h√¨nh Gemini API qua API gi√°n ti·∫øp")
print(f"   - API Key: {'‚úì' if GEMINI_API_KEY else '‚úó'}")
print(f"   - Text Model: {text_model} ‚úì")
print(f"   - Image Model: {image_model} ‚úì (s·∫Ω g·ªçi qua API khi c·∫ßn)")

# Ki·ªÉm tra text model (t√πy ch·ªçn, ƒë·ªÉ x√°c nh·∫≠n)
try:
    response = client.chat.completions.create(
        model=text_model,
        messages=[
            {
                "role": "user",
                "content": "Test connection: Say 'OK' if connected."
            }
        ]
    )
    print(f"   - Text Model Test: {response.choices[0].message.content}")
except Exception as e:
    print(f"‚ö†Ô∏è L·ªói ki·ªÉm tra text model: {e}")

# Ki·ªÉm tra image model (th·ª≠ t·∫°o ·∫£nh test nh·ªè)
try:
    url = f"{AI_API_BASE}/images/generations"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {GEMINI_API_KEY}"
    }
    data = {
        "model": image_model,
        "prompt": "A simple test image: a blue square",
        "n": 1  # T·∫°o 1 ·∫£nh test
    }

    response = requests.post(url, headers=headers, data=json.dumps(data))
    response.raise_for_status()
    print("   - Image Model Test: OK")
except Exception as e:
    print(f"‚ö†Ô∏è L·ªói ki·ªÉm tra image model: {e}")



